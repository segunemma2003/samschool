name: Update Compasse Application

on:
  push:
    branches: [main]

jobs:
  update:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy Updates to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 600s
          script: |
            set -e

            echo "🚀 Starting application update..."

            # Navigate to application directory
            cd /var/www/compasse

            # Create quick backup
            BACKUP_DIR="/var/www/compasse_backup_$(date +%Y%m%d_%H%M%S)"
            echo "💾 Creating backup..."
            sudo cp -r /var/www/compasse $BACKUP_DIR
            echo "✅ Backup created: $BACKUP_DIR"

            # Put application in maintenance mode
            echo "🔧 Enabling maintenance mode..."
            php artisan down --retry=60 --refresh=15 || echo "Could not enable maintenance mode"

            # Pull latest changes from GitHub
            echo "📥 Pulling latest changes..."
            git fetch --all
            git reset --hard origin/main
            git clean -fd
            echo "✅ Code updated successfully"

            # Fix Filament EBooks resource structure conflicts (COMPREHENSIVE FIX)
            echo "🔧 Fixing EBooks resource file structure conflicts..."

            # Step 1: Remove all problematic EBooks-related files and directories
            echo "🗑️ Cleaning up conflicting EBooks files..."

            # Remove duplicate directories
            if [ -d "app/Filament/Ourstudent/Resources/EBooksResource" ]; then
                echo "  - Removing EBooksResource directory"
                sudo rm -rf app/Filament/Ourstudent/Resources/EBooksResource
            fi

            if [ -d "app/Filament/Ourstudent/Resources/EbooksResource" ]; then
                echo "  - Removing EbooksResource directory"
                sudo rm -rf app/Filament/Ourstudent/Resources/EbooksResource
            fi

            # Remove orphaned page files in wrong locations
            if [ -d "app/Filament/Ourstudent/Resources/Pages" ]; then
                echo "  - Removing orphaned Pages directory"
                sudo rm -rf app/Filament/Ourstudent/Resources/Pages
            fi

            # Remove any individual conflicting files
            find app/Filament/Ourstudent/Resources/ -name "*Ebook*" -type f -delete 2>/dev/null || true

            echo "✅ Conflicting files cleaned up"

            # Step 2: Clear Composer autoload cache
            echo "🧹 Clearing Composer autoload cache..."
            composer dump-autoload --no-interaction || echo "Composer dump-autoload failed, continuing..."

            # Step 3: Clear Laravel autoload cache
            rm -rf bootstrap/cache/packages.php 2>/dev/null || true
            rm -rf bootstrap/cache/services.php 2>/dev/null || true

            echo "✅ EBooks resource conflicts resolved"

            # Fix file permissions (ADDED THIS SECTION)
            echo "🔐 Setting proper file permissions..."

            # Ensure storage and bootstrap/cache directories exist
            sudo mkdir -p storage/framework/{sessions,views,cache,testing}
            sudo mkdir -p storage/logs
            sudo mkdir -p storage/app/public
            sudo mkdir -p bootstrap/cache

            # Set ownership to web server user
            sudo chown -R www-data:www-data storage/
            sudo chown -R www-data:www-data bootstrap/cache/

            # Set proper permissions
            sudo chmod -R 775 storage/
            sudo chmod -R 775 bootstrap/cache/

            # Ensure the web server can write to these directories
            sudo chmod -R g+w storage/
            sudo chmod -R g+w bootstrap/cache/

            # Set executable permissions on artisan
            sudo chmod +x artisan

            echo "✅ File permissions set correctly"

            # Update Composer dependencies
            echo "📦 Updating dependencies..."

            # Set Composer environment variables to handle warnings
            export COMPOSER_ALLOW_SUPERUSER=1
            export COMPOSER_NO_INTERACTION=1

            # Clear any existing Composer cache issues
            composer clear-cache --no-interaction || echo "Composer cache clear failed, continuing..."

            # Install dependencies with proper flags
            composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev || {
                echo "⚠️ Composer install failed, trying alternative approach..."
                composer install --no-interaction --no-scripts || echo "Alternative composer install also failed"
            }

            # Force regenerate autoload files
            composer dump-autoload --optimize --no-interaction || echo "Composer dump-autoload failed"

            echo "✅ Dependencies updated"

            # Clear Laravel caches before fixing permissions again
            echo "🧹 Clearing application caches..."
            php artisan optimize:clear
            php artisan view:clear
            php artisan cache:clear
            php artisan config:clear
            php artisan route:clear
            echo "✅ Caches cleared"

            # Fix permissions again after clearing caches (IMPORTANT)
            echo "🔐 Re-setting permissions after cache clear..."
            sudo chown -R www-data:www-data storage/
            sudo chown -R www-data:www-data bootstrap/cache/
            sudo chmod -R 775 storage/
            sudo chmod -R 775 bootstrap/cache/
            echo "✅ Permissions re-applied"

            # Handle migration conflicts before running migrations
            echo "🔍 Checking for migration conflicts..."

            # Check if problematic table exists and mark migration as complete if needed
            if php -r "
            require 'vendor/autoload.php';
            \$app = require_once 'bootstrap/app.php';
            \$kernel = \$app->make(Illuminate\\Contracts\\Console\\Kernel::class);
            \$kernel->bootstrap();

            use Illuminate\\Support\\Facades\\Schema;
            use Illuminate\\Support\\Facades\\DB;

            // Check if table exists but migration is not recorded
            if (Schema::hasTable('hostel_house_masters')) {
                \$migrationExists = DB::table('migrations')
                    ->where('migration', '2025_04_26_020335_create_hostel_house_masters_table')
                    ->exists();

                if (!\$migrationExists) {
                    echo 'MARK_MIGRATION';
                }
            }
            "; then
                echo "🔧 Marking existing hostel_house_masters table migration as complete..."
                php artisan migrate:status

                # Mark the migration as run without executing it
                php -r "
                require 'vendor/autoload.php';
                \$app = require_once 'bootstrap/app.php';
                \$kernel = \$app->make(Illuminate\\Contracts\\Console\\Kernel::class);
                \$kernel->bootstrap();

                use Illuminate\\Support\\Facades\\DB;

                DB::table('migrations')->insertOrIgnore([
                    'migration' => '2025_04_26_020335_create_hostel_house_masters_table',
                    'batch' => DB::table('migrations')->max('batch') + 1
                ]);
                echo 'Migration marked as complete';
                "

                echo "✅ Migration conflict resolved"
            fi

            # Run database migrations with better error handling
            echo "🔄 Running database migrations..."
            if ! php artisan migrate --force; then
              echo "⚠️ Some migrations failed, but continuing deployment..."
              echo "📋 Migration status:"
              php artisan migrate:status
            else
              echo "✅ Migrations completed successfully"
            fi

            # Run tenant migrations with error handling
            echo "🔄 Running tenant migrations..."
            if ! php artisan tenants:migrate --force; then
              echo "⚠️ Tenant migration failed, continuing with deployment..."
            else
              echo "✅ Tenant migrations completed"
            fi

            # Clear and cache configurations (SKIP ROUTE CACHING to avoid conflicts)
            echo "🧹 Clearing and caching configurations..."
            php artisan optimize:clear
            php artisan config:cache
            # Skip route caching to avoid route conflicts
            # php artisan route:cache
            php artisan view:cache
            echo "✅ Configurations cached (routes skipped for stability)"

            # Final permission fix after all operations (CRITICAL)
            echo "🔐 Final permission check and fix..."
            sudo chown -R www-data:www-data storage/
            sudo chown -R www-data:www-data bootstrap/cache/
            sudo chmod -R 775 storage/
            sudo chmod -R 775 bootstrap/cache/

            # Verify permissions were set correctly
            echo "📋 Verifying permissions..."
            ls -la storage/framework/views/ || echo "Views directory verification failed"
            ls -la bootstrap/cache/ || echo "Bootstrap cache verification failed"
            echo "✅ Final permissions applied"

            # Restart queue workers
            echo "🔄 Restarting queue workers..."
            php artisan queue:restart
            if sudo supervisorctl status 2>/dev/null | grep -q "compasse-worker"; then
              sudo supervisorctl restart compasse-worker:* || echo "Could not restart workers"
            else
              echo "ℹ️ No supervisor workers found"
            fi
            echo "✅ Queue workers restarted"

            # Restart PHP-FPM
            echo "🔄 Restarting PHP-FPM..."
            sudo systemctl reload php8.4-fpm || echo "Could not reload PHP-FPM"
            echo "✅ PHP-FPM reloaded"

            # Take application out of maintenance mode
            echo "🟢 Disabling maintenance mode..."
            php artisan up
            echo "✅ Application is now live"

            # Clean up old backups (keep last 5)
            echo "🧹 Cleaning up old backups..."
            ls -td /var/www/compasse_backup_* 2>/dev/null | tail -n +6 | xargs -r rm -rf || echo "No old backups to clean"
            echo "✅ Old backups cleaned"

            echo ""
            echo "🎉 Application update completed successfully!"
            echo "📊 Summary:"
            echo "  ✅ Code pulled from GitHub"
            echo "  ✅ File permissions fixed"
            echo "  ✅ Dependencies updated"
            echo "  ✅ Database migrations handled"
            echo "  ✅ Tenant migrations handled"
            echo "  ✅ Configurations cached"
            echo "  ✅ Queue workers restarted"
            echo "  ✅ Application is live"
            echo ""
            echo "🔗 Visit your site to verify the update!"

      - name: Rollback on Failure
        if: failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 300s
          script: |
            echo "❌ Update failed! Starting automatic rollback..."

            # Navigate to the correct directory first
            cd /var/www/compasse || cd /var/www/ || echo "Could not navigate to project directory"

            # Find the latest backup
            LATEST_BACKUP=$(ls -td /var/www/compasse_backup_* 2>/dev/null | head -n1)

            if [ -n "$LATEST_BACKUP" ] && [ -d "$LATEST_BACKUP" ]; then
              echo "📦 Rolling back to: $LATEST_BACKUP"

              # Stop queue workers safely
              if command -v supervisorctl >/dev/null 2>&1; then
                if sudo supervisorctl status 2>/dev/null | grep -q "compasse-worker"; then
                  sudo supervisorctl stop compasse-worker:* || true
                fi
              fi

              # Restore from backup (more safely)
              if [ -d "/var/www/compasse" ]; then
                sudo rm -rf /var/www/compasse || echo "Could not remove current directory"
              fi

              sudo cp -r "$LATEST_BACKUP" /var/www/compasse || echo "Could not restore backup"

              # Fix permissions after rollback (ADDED)
              echo "🔐 Fixing permissions after rollback..."
              sudo chown -R www-data:www-data /var/www/compasse/storage /var/www/compasse/bootstrap/cache 2>/dev/null || true
              sudo chmod -R 775 /var/www/compasse/storage /var/www/compasse/bootstrap/cache 2>/dev/null || true
              sudo chown -R $USER:$USER /var/www/compasse 2>/dev/null || true

              # Restart services safely
              cd /var/www/compasse || echo "Could not navigate to restored directory"

              # Bring app back up
              if [ -f "artisan" ]; then
                php artisan up || true

                # Restart workers if they exist
                if command -v supervisorctl >/dev/null 2>&1; then
                  if sudo supervisorctl status 2>/dev/null | grep -q "compasse-worker"; then
                    sudo supervisorctl start compasse-worker:* || true
                  fi
                fi

                # Restart PHP-FPM
                sudo systemctl reload php8.4-fpm 2>/dev/null || true
              fi

              echo "✅ Automatic rollback completed with permissions fixed!"
              echo "🔗 Your previous version should now be restored"
            else
              echo "❌ No backup found for rollback!"
              echo "🚨 Manual intervention required"

              # At least try to bring the app back up
              cd /var/www/compasse 2>/dev/null || true
              if [ -f "artisan" ]; then
                php artisan up || true
              fi
            fi

      - name: Notify Success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "🚀 Application has been updated and is running the latest code"
          echo "📅 Deployed at: $(date)"
          echo "📊 Commit: ${{ github.sha }}"

      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "🔄 Automatic rollback attempted"
          echo "📅 Failed at: $(date)"
          echo "📊 Commit: ${{ github.sha }}"
          echo "🚨 Please check the server manually"
