name: Deploy Compasse (Main Branch) - Fixed

on:
  push:
    branches: [main]

env:
  PHP_VERSION: "8.3"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Setup test environment
        run: |
          cp .env.example .env
          # Configure for SQLite testing
          sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=sqlite/' .env
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=database\/database.sqlite/' .env
          sed -i 's/DB_HOST=.*//' .env
          sed -i 's/DB_PORT=.*//' .env
          sed -i 's/DB_USERNAME=.*//' .env
          sed -i 's/DB_PASSWORD=.*//' .env
          echo "TENANCY_SKIP_DOMAIN_CHECK=true" >> .env
          # Create SQLite database
          mkdir -p database
          touch database/database.sqlite

      - name: Generate application key
        run: php artisan key:generate

      - name: Clear autoload and optimize
        run: |
          composer dump-autoload --optimize
          php artisan optimize:clear

      - name: Run database migrations
        run: php artisan migrate --force
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
          TENANCY_SKIP_DOMAIN_CHECK: true

      - name: Run tests
        run: php artisan test
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
          TENANCY_SKIP_DOMAIN_CHECK: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 1800s
          script: |
            set -e

            echo "🚀 Starting Compasse deployment (Fixed Version)..."

            # Variables
            REPO_URL="https://github.com/segunemma2003/samschool.git"
            APP_DIR="/var/www/compasse"
            BRANCH="main"

            # Create backup only if directory exists and has content
            if [ -d "$APP_DIR" ] && [ "$(ls -A $APP_DIR 2>/dev/null)" ]; then
              BACKUP_DIR="/var/www/compasse_backup_$(date +%Y%m%d_%H%M%S)"
              echo "💾 Creating backup of existing installation..."
              sudo cp -r $APP_DIR $BACKUP_DIR
              echo "✅ Backup created at: $BACKUP_DIR"
            else
              echo "ℹ️  No existing installation found - this appears to be first deployment"
            fi

            # Setup application directory
            sudo mkdir -p $APP_DIR
            sudo chown -R $USER:$USER $APP_DIR

            # Clone or update repository
            if [ -d "$APP_DIR/.git" ]; then
              echo "📥 Updating existing repository..."
              cd $APP_DIR
              git fetch --all
              git reset --hard origin/$BRANCH
              git clean -fd
            else
              echo "📥 Cloning repository for first time..."
              # Clear directory if it has any files
              if [ "$(ls -A $APP_DIR 2>/dev/null)" ]; then
                rm -rf $APP_DIR/*
              fi
              git clone -b $BRANCH $REPO_URL $APP_DIR
              cd $APP_DIR
              echo "✅ Repository cloned successfully"
            fi

            # Install dependencies and fix autoloading
            echo "📦 Installing Composer dependencies..."
            composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

            echo "🔧 Fixing autoload issues..."
            composer dump-autoload --optimize
            echo "✅ Dependencies installed and autoload fixed"

            # Environment configuration - Manual setup message
            echo "🔧 Checking environment configuration..."
            if [ ! -f ".env" ]; then
              echo "📋 Creating .env file from example..."
              cp .env.example .env
              echo "⚠️  IMPORTANT: You need to manually configure your .env file!"
              echo "⚠️  Please SSH into the server and edit /var/www/compasse/.env"
              echo "⚠️  Set your database credentials, S3 settings, and other configurations"
              echo "⚠️  Then run: php artisan key:generate"
            else
              echo "✅ .env file already exists - keeping your manual configuration"
            fi

            # Generate app key if not set
            if ! grep -q "APP_KEY=base64:" .env; then
              echo "🔑 Generating application key..."
              php artisan key:generate --force
              echo "✅ Application key generated"
            else
              echo "✅ Application key already exists"
            fi

            # Create required storage directories
            echo "📁 Creating storage directories..."
            mkdir -p storage/{app,framework/{cache,sessions,views},logs}
            mkdir -p bootstrap/cache
            echo "✅ Storage directories created"

            # Clear any cached autoload issues
            echo "🧹 Clearing application cache..."
            php artisan optimize:clear || echo "Cache clear failed - this is normal for first deployment"

            # Check if we can connect to database before proceeding
            echo "🔍 Checking database connection..."
            if php artisan migrate:status > /dev/null 2>&1; then
              echo "✅ Database connection successful"

              # Put in maintenance mode (only if not first deployment)
              if [ -f "storage/framework/down" ] || [ -f "bootstrap/cache/config.php" ]; then
                php artisan down --retry=60 || echo "Could not put in maintenance mode"
              fi

              # Run migrations
              echo "🔄 Running migrations..."
              php artisan migrate --force

              # Run tenant migrations if available
              php artisan tenants:migrate --force || echo "No tenant migrations found"

              echo "✅ Migrations completed"

              # Cache configurations after successful migration
              echo "📦 Caching configurations..."
              php artisan config:cache || echo "Config cache failed"
              php artisan route:cache || echo "Route cache failed"
              php artisan view:cache || echo "View cache failed"
              echo "✅ Configurations cached"
            else
              echo "⚠️  Database connection failed - skipping migrations"
              echo "⚠️  Please configure your .env file with correct database settings"
              echo "⚠️  Then manually run: php artisan migrate --force"
            fi

            # Set proper permissions
            echo "🔒 Setting file permissions..."
            sudo chown -R www-data:www-data storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache
            sudo chown -R $USER:$USER $APP_DIR
            echo "✅ Permissions set"

            # Install or restart supervisor workers (create config if not exists)
            echo "⚙️  Configuring supervisor workers..."
            if [ ! -f "/etc/supervisor/conf.d/compasse-worker.conf" ]; then
              echo "📝 Creating supervisor configuration..."
              sudo tee /etc/supervisor/conf.d/compasse-worker.conf > /dev/null <<EOF
            [program:compasse-worker]
            process_name=%(program_name)s_%(process_num)02d
            command=php $APP_DIR/artisan queue:work --sleep=3 --tries=3 --max-time=3600
            autostart=true
            autorestart=true
            stopasgroup=true
            killasgroup=true
            user=www-data
            numprocs=2
            redirect_stderr=true
            stdout_logfile=$APP_DIR/storage/logs/worker.log
            stopwaitsecs=3600
            EOF
              sudo supervisorctl reread
              sudo supervisorctl update
              echo "✅ Supervisor configuration created"
            fi

            sudo supervisorctl restart compasse-worker:* || echo "Supervisor restart failed - may not be configured yet"

            # Reload Nginx
            echo "🔄 Reloading Nginx..."
            sudo nginx -t && sudo systemctl reload nginx || echo "Nginx reload failed - please check configuration"

            # Take out of maintenance mode
            if [ -f "storage/framework/down" ]; then
              php artisan up || echo "Could not take out of maintenance mode"
              echo "✅ Application is now live"
            fi

            echo ""
            echo "🎉 Compasse deployment completed successfully!"
            echo ""
            echo "📋 NEXT STEPS (IMPORTANT):"
            echo "1. SSH into your server: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
            echo "2. Edit your .env file: nano /var/www/compasse/.env"
            echo "3. Configure your database settings, S3 credentials, etc."
            echo "4. Run migrations: cd /var/www/compasse && php artisan migrate --force"
            echo "5. Run tenant migrations: php artisan tenants:migrate --force"
            echo "6. Test your application: visit your domain"
            echo ""
            echo "💡 Your application files are deployed at: /var/www/compasse"
            echo "💡 Logs are available at: /var/www/compasse/storage/logs/"
            echo ""
            echo "🔧 To fix any remaining PSR-4 issues, run on server:"
            echo "   cd /var/www/compasse && composer dump-autoload --optimize"
